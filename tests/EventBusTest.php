<?php

namespace Test;

use EasySwoole\Queue\Driver\RedisQueue;
use EasySwoole\Redis\Config\RedisConfig;
use PHPUnit\Framework\TestCase;
use Test\LoginEvent\DemoEvent;
use Test\LoginEvent\ListenerOne;
use Test\LoginEvent\ListenerTwo;
use Thewindear\EasyswooleEventBus\EventBus;
use Thewindear\EasyswooleEventBus\EventProcess;

class EventBusTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $redisConfig = new RedisConfig(['host'=>'127.0.0.1', 'port'=>6379, 'auth'=>'123456', 'db'=>0]);
        $driver = new RedisQueue($redisConfig, 'event_bus');
        EventBus::getInstance($driver);
        EventBus::getInstance()->add(DemoEvent::class, [ListenerOne::class, 'handle']);
        EventBus::getInstance()->add(DemoEvent::class, [ListenerTwo::class, 'handle']);
    }

    public function testAdd()
    {
        EventBus::getInstance()->add(DemoEvent::class, [ListenerOne::class, 'handle']);
        $this->assertEquals(true,isset(EventBus::$listen[DemoEvent::class]), 'add failure');
        $this->assertEquals(ListenerOne::class, EventBus::$listen[DemoEvent::class][0][0], 'listener class error');
        $this->assertEquals('handle', EventBus::$listen[DemoEvent::class][0][1], 'listener handle error');
    }

    public function testFireSync()
    {
        EventBus::getInstance()->add(DemoEvent::class, [ListenerOne::class, 'handle']);
        EventBus::getInstance()->fireSync(new DemoEvent(['username'=>'root', 'ip'=>'127.0.0.1']));
    }

    public function testFireAsync()
    {
        EventBus::getInstance()->add(DemoEvent::class, [ListenerOne::class, 'handle']);
        EventBus::getInstance()->add(DemoEvent::class, [ListenerTwo::class, 'handle']);
        $this->assertEquals(true, EventBus::getInstance()->fireAsync(new DemoEvent(['username'=>'root', 'ip'=>'127.0.0.1'])), 'delivery failure');
    }

    public function testEventConsumer()
    {
        EventBus::getInstance()->add(DemoEvent::class, [ListenerOne::class, 'handle']);
        $job = EventBus::getInstance()->getQueue()->consumer()->pop();
        if (!empty($job)) {
            EventProcess::jobConsumer($job);
        }
    }

    public function testEventHandle()
    {
        EventBus::getInstance()->add(DemoEvent::class, [ListenerOne::class, 'handle']);
        EventBus::getInstance()->add(DemoEvent::class, [ListenerTwo::class, 'handle']);
        EventProcess::handle();
    }

}